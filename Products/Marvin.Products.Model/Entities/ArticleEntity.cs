//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.Products.Model
{

    /// <summary>
    /// There are no comments for Marvin.Products.Model.ArticleEntity in the schema.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [System.Runtime.Serialization.KnownType(typeof(ProductEntity))]
    [System.Runtime.Serialization.KnownType(typeof(ArticleEntity))]
    [System.Runtime.Serialization.KnownType(typeof(PartLink))]
    public partial class ArticleEntity : IEquatable<ArticleEntity>, IMergeParent, IEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public ArticleEntity()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long State
        {
            get
            {
                return _state;
            }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    OnPropertyChanged("State");
                }
            }
        }
        private long _state = 0;

    
        /// <summary>
        /// There are no comments for ProductionDate in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.DateTime ProductionDate
        {
            get
            {
                return _productionDate;
            }
            set
            {
                if (_productionDate != value)
                {
                    _productionDate = value;
                    OnPropertyChanged("ProductionDate");
                }
            }
        }
        private global::System.DateTime _productionDate;

    
        /// <summary>
        /// There are no comments for Identifier in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string Identifier
        {
            get
            {
                return _identifier;
            }
            set
            {
                if (_identifier != value)
                {
                    _identifier = value;
                    OnPropertyChanged("Identifier");
                }
            }
        }
        private string _identifier;

    
        /// <summary>
        /// There are no comments for NumberType in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual int NumberType
        {
            get
            {
                return _numberType;
            }
            set
            {
                if (_numberType != value)
                {
                    _numberType = value;
                    OnPropertyChanged("NumberType");
                }
            }
        }
        private int _numberType = 0;

    
        /// <summary>
        /// There are no comments for ProductId in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual long ProductId
        {
            get
            {
                return _productId;
            }
            set
            {
                if (_productId != value)
                {
                    _productId = value;
                    OnPropertyChanged("ProductId");
                }
            }
        }
        private long _productId;

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<long> ParentId
        {
            get
            {
                return _parentId;
            }
            set
            {
                if (_parentId != value)
                {
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private global::System.Nullable<long> _parentId;

    
        /// <summary>
        /// There are no comments for ExtensionData in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual string ExtensionData
        {
            get
            {
                return _extensionData;
            }
            set
            {
                if (_extensionData != value)
                {
                    _extensionData = value;
                    OnPropertyChanged("ExtensionData");
                }
            }
        }
        private string _extensionData;

    
        /// <summary>
        /// There are no comments for PartLinkId in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual global::System.Nullable<long> PartLinkId
        {
            get
            {
                return _partLinkId;
            }
            set
            {
                if (_partLinkId != value)
                {
                    _partLinkId = value;
                    OnPropertyChanged("PartLinkId");
                }
            }
        }
        private global::System.Nullable<long> _partLinkId;


        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual ProductEntity Product
        {
            get;
            set;
        }
    
        /// <summary>
        /// There are no comments for Parts in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual ICollection<ArticleEntity> Parts
        {
		    get; set;
        }
    
        /// <summary>
        /// There are no comments for Parent in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual ArticleEntity Parent
        {
            get;
            set;
        }
    
        /// <summary>
        /// There are no comments for PartLink in the schema.
        /// </summary>
        [System.Runtime.Serialization.DataMember]
        public virtual PartLink PartLink
        {
            get;
            set;
        }

        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as ArticleEntity); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The ArticleEntity to compare with the current ArticleEntity.</param>
        /// <returns><c>true</c> if the specified ArticleEntity is equal to the current ArticleEntity; otherwise, <c>false</c>.</returns>
        public bool Equals(ArticleEntity other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two ArticleEntity objects.
        /// </summary>
        /// <param name="a">The first ArticleEntity to compare</param>
        /// <param name="b">The second ArticleEntity to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(ArticleEntity  a, ArticleEntity  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two ArticleEntity objects.
        /// </summary>
        /// <param name="a">The first ArticleEntity to compare</param>
        /// <param name="b">The second ArticleEntity to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(ArticleEntity  a, ArticleEntity b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    
        #region INotifyPropertyChanged Members

        /// <summary>
        /// Raised when a property value changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises a PropertyChanged event.
        /// </summary>
        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
