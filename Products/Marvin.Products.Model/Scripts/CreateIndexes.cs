using System;
using System.Collections.Generic;
using System.Text;
using Marvin.Model;

namespace Marvin.Products.Model
{
	/// <summary>
	/// MARVIN Script class to generate indexes for generated tables                                       
	/// This is autogenerated code, therefor any modifications are useless and will be lost on recreation. 
	///                                                                                                    
	/// If you have questions or modification requests contact Thomas Fuchs.                               
	/// </summary>
	internal class ProductsIndexesScipt : IDatabaseScript
	{
		/// <summary>
		/// Internal class representing a single index
		/// </summary>
		private class Index
		{
			internal Index(string name, string table, string columns)
			{
				Name = name;
				Table = table;
				Columns = columns;
			}

			internal string Name { get; private set; }

			internal string Table { get; private set; }

			internal string Columns { get; private set; }
		}

		public string Name { get { return "ProductsIndexesScipt"; } }

    public bool IsCreationScript { get { return true; } }

		public string GetText()
		{
			var indexes = GenerateIndexArray();
			return BuildScript(indexes);	
		}

		private IEnumerable<Index> GenerateIndexArray()
		{
			var indexes = new List<Index>
			{
				new Index("IDX_ProductEntity_MaterialNumber", "\"ProductEntity\"", "\"MaterialNumber\""),
				new Index("IDX_ArticleEntity_State", "\"ArticleEntity\"", "\"State\""),
				new Index("IDX_ProductEntity_MaterialNumber_Revision", "\"ProductEntity\"", "\"MaterialNumber\", \"Revision\""),
			};
			return indexes;
		}

		private string BuildScript(IEnumerable<Index> indexes)
		{
			var builder = new StringBuilder();
			const string buildString = 
@"CREATE INDEX {0} ON {1} USING btree ({2});";
			foreach (var index in indexes)
			{
				builder.AppendLine(string.Format(buildString, index.Name, index.Table, index.Columns));
			}
			return builder.ToString();
		}
	}
}
