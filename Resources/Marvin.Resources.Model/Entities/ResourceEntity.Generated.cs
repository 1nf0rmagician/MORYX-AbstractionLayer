//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.Resources.Model
{

    /// <summary>
    /// There are no comments for Marvin.Resources.Model.ResourceEntity in the schema.
    /// </summary>
    public partial class ResourceEntity : IEquatable<ResourceEntity>, IMergeParent, IModificationTrackedEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public ResourceEntity()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get
            {
                return _name;
            }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;

    
        /// <summary>
        /// Identifier used within this system - e.g. the COM-Number within the machine.
        /// </summary>
        public virtual string LocalIdentifier
        {
            get
            {
                return _localIdentifier;
            }
            set
            {
                if (_localIdentifier != value)
                {
                    _localIdentifier = value;
                    OnPropertyChanged("LocalIdentifier");
                }
            }
        }
        private string _localIdentifier;

    
        /// <summary>
        /// There are no comments for GlobalIdentifier in the schema.
        /// </summary>
        public virtual string GlobalIdentifier
        {
            get
            {
                return _globalIdentifier;
            }
            set
            {
                if (_globalIdentifier != value)
                {
                    _globalIdentifier = value;
                    OnPropertyChanged("GlobalIdentifier");
                }
            }
        }
        private string _globalIdentifier;

    
        /// <summary>
        /// There are no comments for ExtensionData in the schema.
        /// </summary>
        public virtual string ExtensionData
        {
            get
            {
                return _extensionData;
            }
            set
            {
                if (_extensionData != value)
                {
                    _extensionData = value;
                    OnPropertyChanged("ExtensionData");
                }
            }
        }
        private string _extensionData;

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        public virtual string Type
        {
            get
            {
                return _type;
            }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        private string _type;

    
        /// <summary>
        /// There are no comments for Created in the schema.
        /// </summary>
        public virtual global::System.DateTime Created
        {
            get
            {
                return _created;
            }
            set
            {
                if (_created != value)
                {
                    _created = value;
                    OnPropertyChanged("Created");
                }
            }
        }
        private global::System.DateTime _created;

    
        /// <summary>
        /// There are no comments for Updated in the schema.
        /// </summary>
        public virtual global::System.DateTime Updated
        {
            get
            {
                return _updated;
            }
            set
            {
                if (_updated != value)
                {
                    _updated = value;
                    OnPropertyChanged("Updated");
                }
            }
        }
        private global::System.DateTime _updated;

    
        /// <summary>
        /// There are no comments for Deleted in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> Deleted
        {
            get
            {
                return _deleted;
            }
            set
            {
                if (_deleted != value)
                {
                    _deleted = value;
                    OnPropertyChanged("Deleted");
                }
            }
        }
        private global::System.Nullable<System.DateTime> _deleted;


        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Targets in the schema.
        /// </summary>
        public virtual ICollection<ResourceRelation> Targets
        {
		    get; set;
        }
    
        /// <summary>
        /// There are no comments for Sources in the schema.
        /// </summary>
        public virtual ICollection<ResourceRelation> Sources
        {
		    get; set;
        }

        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as ResourceEntity); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The ResourceEntity to compare with the current ResourceEntity.</param>
        /// <returns><c>true</c> if the specified ResourceEntity is equal to the current ResourceEntity; otherwise, <c>false</c>.</returns>
        public bool Equals(ResourceEntity other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two ResourceEntity objects.
        /// </summary>
        /// <param name="a">The first ResourceEntity to compare</param>
        /// <param name="b">The second ResourceEntity to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(ResourceEntity  a, ResourceEntity  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two ResourceEntity objects.
        /// </summary>
        /// <param name="a">The first ResourceEntity to compare</param>
        /// <param name="b">The second ResourceEntity to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(ResourceEntity  a, ResourceEntity b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    
        #region INotifyPropertyChanged Members

        /// <summary>
        /// Raised when a property value changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises a PropertyChanged event.
        /// </summary>
        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
