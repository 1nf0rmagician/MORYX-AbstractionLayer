//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using the Marvin template for generating a DbContext and Entities. 
// If you have any questions or suggestions for improvement regarding this code, contact Thomas Fuchs. I allways need feedback to improve.
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Linq;
using Marvin.Model;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;

namespace Marvin.Resources.Model
{

    /// <summary>
    /// There are no comments for Marvin.Resources.Model.ResourceRelation in the schema.
    /// </summary>
    public partial class ResourceRelation : IEquatable<ResourceRelation>, IMergeParent, IEntity    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public ResourceRelation()
        {
        }


        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get
            {
                return _id;
            }
            set
            {
                if (_id != value)
                {
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;

    
        /// <summary>
        /// There are no comments for RelationType in the schema.
        /// </summary>
        public virtual int RelationType
        {
            get
            {
                return _relationType;
            }
            set
            {
                if (_relationType != value)
                {
                    _relationType = value;
                    OnPropertyChanged("RelationType");
                }
            }
        }
        private int _relationType;

    
        /// <summary>
        /// There are no comments for RelationName in the schema.
        /// </summary>
        public virtual string RelationName
        {
            get
            {
                return _relationName;
            }
            set
            {
                if (_relationName != value)
                {
                    _relationName = value;
                    OnPropertyChanged("RelationName");
                }
            }
        }
        private string _relationName;

    
        /// <summary>
        /// There are no comments for SourceId in the schema.
        /// </summary>
        public virtual long SourceId
        {
            get
            {
                return _sourceId;
            }
            set
            {
                if (_sourceId != value)
                {
                    _sourceId = value;
                    OnPropertyChanged("SourceId");
                }
            }
        }
        private long _sourceId;

    
        /// <summary>
        /// There are no comments for TargetId in the schema.
        /// </summary>
        public virtual long TargetId
        {
            get
            {
                return _targetId;
            }
            set
            {
                if (_targetId != value)
                {
                    _targetId = value;
                    OnPropertyChanged("TargetId");
                }
            }
        }
        private long _targetId;


        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Source in the schema.
        /// </summary>
        public virtual ResourceEntity Source
        {
            get;
            set;
        }
    
        /// <summary>
        /// There are no comments for Target in the schema.
        /// </summary>
        public virtual ResourceEntity Target
        {
            get;
            set;
        }

        #endregion
        #region IEquatable
        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object other)
        {
            return Equals(other as ResourceRelation); 
        }

        /// <summary>
        /// Serves as a hash function for a particular type.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Determines whether the specified object is equal to the current object.
        /// </summary>
        /// <param name="other">The ResourceRelation to compare with the current ResourceRelation.</param>
        /// <returns><c>true</c> if the specified ResourceRelation is equal to the current ResourceRelation; otherwise, <c>false</c>.</returns>
        public bool Equals(ResourceRelation other)
        {
            if((object)other == null)
                return false;
            
            // First look for Id, then compare references
            return (Id != 0 && Id == other.Id) || object.ReferenceEquals(this, other);
        }
     
        /// <summary>
        /// Compares two ResourceRelation objects.
        /// </summary>
        /// <param name="a">The first ResourceRelation to compare</param>
        /// <param name="b">The second ResourceRelation to compare</param>
        /// <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        public static bool operator ==(ResourceRelation  a, ResourceRelation  b)
        {
            if((object)a == null && (object)b == null)
                return true;
            return (object)a != null && a.Equals(b);
        }

        /// <summary>
        /// Compares two ResourceRelation objects.
        /// </summary>
        /// <param name="a">The first ResourceRelation to compare</param>
        /// <param name="b">The second ResourceRelation to compare</param>
        /// <returns><c>true</c> if the specified objects are not equal; otherwise, <c>false</c>.</returns>
        public static bool operator !=(ResourceRelation  a, ResourceRelation b)
        {
            return !(a == b);
        }

        #endregion
        
        /// <summary>
        /// Reference to merged child
        /// </summary>
        object IMergeParent.Child { get; set; }
    
        #region INotifyPropertyChanged Members

        /// <summary>
        /// Raised when a property value changed.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises a PropertyChanged event.
        /// </summary>
        protected void OnPropertyChanged(string propertyName) {

          if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}
